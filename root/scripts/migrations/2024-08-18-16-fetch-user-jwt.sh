#!/bin/bash
set -euo pipefail

# Migration: Fetch USER_JWT from API using UID and store in .pcs.secret.env
# This migration retrieves the JWT token for a user based on their UID
# and stores it in the secret environment file for authentication

# Define file paths
USER_ENV_FILE="/DATA/AppData/casaos/apps/yundera/.ynd.user.env"
SECRET_ENV_FILE="/DATA/AppData/casaos/apps/yundera/.pcs.secret.env"
PCS_ENV_FILE="/DATA/AppData/casaos/apps/yundera/.pcs.env"


# Check if USER_JWT already exists and is not empty
if [ -f "$SECRET_ENV_FILE" ] && grep -q "^USER_JWT=" "$SECRET_ENV_FILE"; then
    EXISTING_JWT=$(grep "^USER_JWT=" "$SECRET_ENV_FILE" | head -1 | cut -d '=' -f2- | tr -d '"' | tr -d ' \t\r\n')
    if [ -n "$EXISTING_JWT" ]; then
        echo "USER_JWT already exists in $SECRET_ENV_FILE, skipping API call"
        exit 0
    else
        echo "USER_JWT exists but is empty, will fetch new token"
    fi
fi

# Get UID from user env file
USER_UID=""
if [ -f "$USER_ENV_FILE" ] && grep -q "^UID=" "$USER_ENV_FILE"; then
    USER_UID=$(grep "^UID=" "$USER_ENV_FILE" | head -1 | cut -d '=' -f2- | tr -d '"' | tr -d ' \t\r\n')
    echo "Found UID in user env file: $USER_UID"
else
    echo "Error: UID not found in $USER_ENV_FILE, cannot fetch JWT"
    echo "Please ensure UID migration has run first"
    exit 1
fi

# Validate UID is not empty
if [ -z "$USER_UID" ]; then
    echo "Error: UID is empty in $USER_ENV_FILE, cannot fetch JWT"
    exit 1
fi

# Get YUNDERA_USER_API from PCS env file and construct JWT endpoint
YUNDERA_USER_API=""
if [ -f "$PCS_ENV_FILE" ] && grep -q "^YUNDERA_USER_API=" "$PCS_ENV_FILE"; then
    YUNDERA_USER_API=$(grep "^YUNDERA_USER_API=" "$PCS_ENV_FILE" | head -1 | cut -d '=' -f2- | tr -d '"' | tr -d ' \t\r\n')
    echo "Found YUNDERA_USER_API in PCS env: $YUNDERA_USER_API"
else
    echo "Error: YUNDERA_USER_API not found in $PCS_ENV_FILE"
    echo "Please ensure YUNDERA_USER_API is configured in the PCS environment file"
    exit 1
fi

# Validate YUNDERA_USER_API is not empty
if [ -z "$YUNDERA_USER_API" ]; then
    echo "Error: YUNDERA_USER_API is empty in $PCS_ENV_FILE"
    exit 1
fi

# Construct JWT API endpoint by appending /jwt
JWT_API_ENDPOINT="${YUNDERA_USER_API}/jwt"
echo "Using JWT API endpoint: $JWT_API_ENDPOINT"

echo "Calling JWT API to fetch token for UID: $USER_UID"

# Make API call to fetch JWT token
# API format: GET /jwt/{UID}
# Expected response: raw JWT token string
USER_JWT=""

# Construct API URL (UID is part of the path, not query parameter)
API_URL="${JWT_API_ENDPOINT}/${USER_UID}"

# Make the API call with error handling
if command -v curl >/dev/null 2>&1; then
    echo "Making API call to fetch JWT from: $API_URL"
    USER_JWT=$(curl -s -f -X GET "$API_URL" 2>/dev/null || true)
else
    echo "Error: curl not available for API call"
    exit 1
fi

# Check if API call was successful
if [ -z "$USER_JWT" ]; then
    echo "Error: API call failed or returned empty response"
    echo "API URL: $API_URL"
    exit 1
fi

# Validate JWT token format (basic check)
if [[ ! "$USER_JWT" =~ ^eyJ[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
    echo "Error: Response does not appear to be a valid JWT token"
    echo "Response: $USER_JWT"
    exit 1
fi

echo "Successfully received JWT token from API"

# Create secret env file if it doesn't exist
mkdir -p "$(dirname "$SECRET_ENV_FILE")"
if [ ! -f "$SECRET_ENV_FILE" ]; then
    echo "# Secret environment variables (generated by migration)" > "$SECRET_ENV_FILE"
fi

# Add or update USER_JWT in secret env file
if grep -q "^USER_JWT=" "$SECRET_ENV_FILE"; then
    # Replace existing USER_JWT line
    sed -i "s/^USER_JWT=.*/USER_JWT=$USER_JWT/" "$SECRET_ENV_FILE"
    echo "Updated USER_JWT in $SECRET_ENV_FILE"
else
    # Add USER_JWT line (ensure newline before appending)
    echo "" >> "$SECRET_ENV_FILE"
    echo "USER_JWT=$USER_JWT" >> "$SECRET_ENV_FILE"
    echo "Added USER_JWT to $SECRET_ENV_FILE"
fi

# Set proper permissions on secret env file
chmod 600 "$SECRET_ENV_FILE"

echo "Successfully stored USER_JWT in .pcs.secret.env"

